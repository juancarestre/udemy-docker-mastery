docker container run --publish 80:80 --detach --name webhost nginx
docker container logs webhost
docker  container top webhost
iereikohquieWuethai6caeyohn8CuDa
docker container top
docker container inspect containername
dockeer container stats
docker container run -it
docker container exec -it
docker container run -it --name ubuntu ubuntu
docker container start 
docker container exec -it mysql bash
docker container port webhost
docker container inspect --format '{{ .NetworkSettings.IPAddress }}' webhost
docker network ls
docker network inspect
docker network create --driver
docker network create
docker network connect 57d71ae44a07 dcde03e900e4
docker container inspect dcde03e900e4
docker container exec my_nginx ping new_nginx
docker container run --rm --net dude alpine nslookup search
an image is app binaries and dependencies of and application
docker image history nginx:latest
docker image tag --help
docker image tag python:3.7.0 juancrestre/py37
docker login
docker image push juancrestre/py37:testing

docker file

docker-build

FROM baseimage:tag

ENV ENV_VAR_NAME environmentvariable

RUN apt-ley adv --keyserver comand && other command (because are in the same layer)

EXPOSE 80 443
## expose these ports on the dokcar virtual network

cmd ["nginx", "-g", "daemon off;"]

docker image build -t customnginx . (With dockerfile)

docker image tag nginx-with-html juancrestre/n
ginx-with-html:first

 docker push juancrestre/nginx-with-html:first

immutable: never change in time
volumes and bind mounts
volumes make special location outside of container ufs
need manually deletion

bind mounts: link container with the host
ephemeral

docker volume ls
docker volume
docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql

bind mounting

docker container run -d --name nginx2 -p 80:80 -v ${pwd}:/usr/share/nginx/html nginx

docker container run -p 80:4000 -v ${pwd}:/site bretfisher/jekyll-serve


docker-composeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee

docker-compose up
docker-compose down

docker-compose -d
docker-compose logs

docker swarrrrrrmmmmmmmmmm

docker swarm init

docker service

docker info

docker service ls

docker service rm

docker service create alpine ping 8.8.8.8

docker swarm init --advertise-addr 192.168.0.8

docker swarm join --token SWMTKN-1-2ar6t2f5zqcmnrjgc1849lyzq5gmlukmrnwq1gupwnj8tsajhj-5ljidos4kgdgh4vcj50a7t870 192.168.0.8:2377

docker node update --role manager node2

docker node
docker swarm
docker service

docker service create --replicas 3 alpine ping 8.8.8.8

docker network create --driver overlay mydrupal

docker service create --name psql --network mydrupal -e POSTGRES_PASSWORD=mypass postgress
docker service create --name drupal --network mydrupal -p 80:80 drupal

docker network create -d overlay backend
docker network create -d overlay frontend
docker service create --name vote -p 80:80 --network frontend--replica 2 dockersamples/examplevotingapp_vote:before
docker stack deploy -c example-voting-app-stack.yml  voteapp

secrets for local developmenttttttttt

swarm stack and secrets


docker-compose -f .\docker-compose.yml -f .\docker-compose.prod.yml config --help

docker service update --image myapp:1.2.1 <servicename>

docker service update --env-add NODE_ENV=production --publish-rm 8080

docker service scale web=8 api=6

docker swarm init
docker service  create -p 8088:80 --name web nginx:latest
docker service ls
docker service scale web=5
docker service update --image nginx:1.13.6 web
docker service update --publish-rm 8088 --publish-add 9090:80 web
docker service update --force web

docker container run --name p2 -d --health-cmd="pg_isready -U postgress || exit 1" postgres

container registrieeeeeeeeeeeeeeeeeeeeeees


